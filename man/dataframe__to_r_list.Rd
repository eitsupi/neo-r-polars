% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataframe-to_r_list.R
\name{dataframe__to_r_list}
\alias{dataframe__to_r_list}
\title{Export the polars DataFrame as an R list of R vectors}
\usage{
dataframe__to_r_list(
  ...,
  int64 = "double",
  ambiguous = "raise",
  non_existent = "raise"
)
}
\arguments{
\item{...}{These dots are for future extensions and must be empty.}

\item{int64}{Determine how to convert Polars' Int64, UInt32, or UInt64 type values to R type.
One of the followings:
\itemize{
\item \code{"double"}: Convert to the R's \link{double} type.
\item \code{"character"}: Convert to the R's \link{character} type.
\item \code{"integer"}: Convert to the R's \link{integer} type.
If the value is out of the range of R's integer type, export as \link{NA_integer_}.
\item \code{"integer64"}: Convert to the \link[bit64:bit64-package]{bit64::integer64} class.
The \link[bit64:bit64-package]{bit64} package must be installed.
If the value is out of the range of \link[bit64:bit64-package]{bit64::integer64}, export as \link[bit64:as.integer64.character]{bit64::NA_integer64_}.
}}

\item{ambiguous}{Determine how to deal with ambiguous datetimes.
Character vector or Expression containing the followings:
\itemize{
\item \code{"raise"} (default): Throw an error
\item \code{"earliest"}: Use the earliest datetime
\item \code{"latest"}: Use the latest datetime
\item \code{"null"}: Return a null value
}}

\item{non_existent}{Determine how to deal with non-existent datetimes.
One of the followings:
\itemize{
\item \code{"raise"} (default): Throw an error
\item \code{"null"}: Return a null value
}}
}
\value{
A \link{list} of \link[=vector]{vectors}
}
\description{
This method is a convention of \code{\link[=dataframe__get_columns]{<DataFrame>$get_columns()}} and
\code{\link[=series__to_r_vector]{<Series>$to_r_vector()}}.
First, it gets the columns of the DataFrame as a list of \link{Series}, then it converts each \link{Series}
to an R \link{vector}.
}
\examples{
df <- pl$DataFrame(foo = c(1, 2, 3), bar = c(4, 5, 6))
df$to_r_list()

df <- pl$DataFrame(
  a = 1:4,
  b = c(0.5, 4, 10, 13),
  c = c(TRUE, TRUE, FALSE, TRUE)
)
df$to_r_list()
}
