% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe-frame.R
\name{lazyframe__profile}
\alias{lazyframe__profile}
\title{Collect and profile a lazy query.}
\usage{
lazyframe__profile(
  ...,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  cluster_with_columns = TRUE,
  streaming = FALSE,
  no_optimization = FALSE,
  collect_in_background = FALSE,
  show_plot = FALSE,
  truncate_nodes = 0
)

lazyframe__profile(
  ...,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  cluster_with_columns = TRUE,
  streaming = FALSE,
  no_optimization = FALSE,
  collect_in_background = FALSE,
  show_plot = FALSE,
  truncate_nodes = 0
)
}
\arguments{
\item{...}{Dots which should be empty.}

\item{type_coercion}{A logical, indicats type coercion optimization.}

\item{predicate_pushdown}{A logical, indicats predicate pushdown optimization.}

\item{projection_pushdown}{A logical, indicats projection pushdown optimization.}

\item{simplify_expression}{A logical, indicats simplify expression optimization.}

\item{slice_pushdown}{A logical, indicats slice pushdown optimization.}

\item{comm_subplan_elim}{A logical, indicats tring to cache branching subplans that occur on self-joins or unions.}

\item{comm_subexpr_elim}{A logical, indicats tring to cache common subexpressions.}

\item{cluster_with_columns}{A logical, indicats to combine sequential independent calls to with_columns.}

\item{streaming}{A logical. If \code{TRUE}, process the query in batches to handle larger-than-memory data.
If \code{FALSE} (default), the entire query is processed in a single batch.
Note that streaming mode is considered unstable.
It may be changed at any point without it being considered a breaking change.}

\item{no_optimization}{A logical. If \code{TRUE}, turn off (certain) optimizations.}

\item{show_plot}{Show a Gantt chart of the profiling result}

\item{truncate_nodes}{Truncate the label lengths in the Gantt chart to this
number of characters. If \code{0} (default), do not truncate.}
}
\value{
List of two \code{DataFrame}s: one with the collected result, the other
with the timings of each step. If \code{show_graph = TRUE}, then the plot is
also stored in the list.

List of two \code{DataFrame}s: one with the collected result, the other
with the timings of each step. If \code{show_graph = TRUE}, then the plot is
also stored in the list.
}
\description{
This will run the query and return a list containing the materialized
DataFrame and a DataFrame that contains profiling information of each node
that is executed.

This will run the query and return a list containing the
materialized DataFrame and a DataFrame that contains profiling information
of each node that is executed.
}
\details{
The units of the timings are microseconds.

The units of the timings are microseconds.
}
\examples{
## Simplest use case
pl$LazyFrame()$select(pl$lit(2) + 2)$profile()

## Use $profile() to compare two queries

# -1-  map each Species-group with native polars
as_polars_lf(iris)$
  sort("Sepal.Length")$
  group_by("Species", maintain_order = TRUE)$
  agg(pl$col(pl$Float64)$first() + 5)$
  profile()

# -2-  map each Species-group of each numeric column with an R function

# some R function, prints `.` for each time called by polars
r_func <- \(s) {
  cat(".")
  s$to_r()[1] + 5
}

as_polars_lf(iris)$
  sort("Sepal.Length")$
  group_by("Species", maintain_order = TRUE)$
  agg(pl$col(pl$Float64)$map_elements(r_func))$
  profile()
## Simplest use case
pl$LazyFrame()$select(pl$lit(2) + 2)$profile()

## Use $profile() to compare two queries

# -1-  map each Species-group with native polars, takes ~120us only
as_polars_lf(iris)$
  sort("Sepal.Length")$
  group_by("Species", maintain_order = TRUE)$
  agg(pl$col(pl$Float64)$first() + 5)$
  profile()

# -2-  map each Species-group of each numeric column with an R function, takes ~7000us (slow!)

# some R function, prints `.` for each time called by polars
r_func <- \(s) {
  cat(".")
  s$to_r()[1] + 5
}

as_polars_lf(iris)$
  sort("Sepal.Length")$
  group_by("Species", maintain_order = TRUE)$
  agg(pl$col(pl$Float64)$map_elements(r_func))$
  profile()
}
\seealso{
\itemize{
\item \code{\link[=LazyFrame_collect]{$collect()}} - regular collect.
\item \code{\link[=LazyFrame_collect_in_background]{$collect_in_background()}} - non-blocking
collect returns a future handle. Can also just be used via
\verb{$collect(collect_in_background = TRUE)}.
\item \code{\link[=LazyFrame_sink_parquet]{$sink_parquet()}} streams query to a parquet file.
\item \code{\link[=LazyFrame_sink_ipc]{$sink_ipc()}} streams query to a arrow file.
}

\itemize{
\item \code{\link[=lazyframe__collect]{$collect()}} - regular collect.
\item \code{\link[=lazyframe__collect_in_background]{$collect_in_background()}} - non-blocking
collect returns a future handle. Can also just be used via
\verb{$collect(collect_in_background = TRUE)}.
\item \code{\link[=lazyframe__sink_parquet]{$sink_parquet()}} streams query to a parquet file.
\item \code{\link[=lazyframe__sink_ipc]{$sink_ipc()}} streams query to a arrow file.
}
}
