% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe-frame.R
\name{lazyframe__fetch}
\alias{lazyframe__fetch}
\title{Fetch \code{n} rows of a LazyFrame}
\usage{
lazyframe__fetch(
  n_rows = 500,
  ...,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  cluster_with_columns = TRUE,
  streaming = FALSE,
  no_optimization = FALSE
)
}
\arguments{
\item{n_rows}{Integer. Maximum number of rows to fetch.}

\item{...}{Dots which should be empty.}

\item{type_coercion}{Logical. Coerce types such that operations succeed and
run on minimal required memory.}

\item{predicate_pushdown}{Logical. Applies filters as early as possible at
scan level.}

\item{projection_pushdown}{Logical. Select only the columns that are needed
at the scan level.}

\item{simplify_expression}{Logical. Various optimizations, such as constant
folding and replacing expensive operations with faster alternatives.}

\item{slice_pushdown}{Logical. Only load the required slice from the scan
level. Don't materialize sliced outputs (e.g. \code{join$head(10)}).}

\item{comm_subplan_elim}{Logical. Will try to cache branching subplans that
occur on self-joins or unions.}

\item{comm_subexpr_elim}{Logical. Common subexpressions will be cached and
reused.}

\item{cluster_with_columns}{Combine sequential independent calls to
\code{\link[=lazyframe__with_columns]{with_columns()}}.}

\item{streaming}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}} Logical. Process the
query in batches to handle larger-than-memory data. If \code{FALSE} (default),
the entire query is processed in a single batch.}
}
\value{
A DataFrame of maximum n_rows
}
\description{
This is similar to \verb{$collect()} but limit the number of rows to collect. It
is mostly useful to check that a query works as expected.
}
\details{
\verb{$fetch()} does not guarantee the final number of rows in the DataFrame output.
It only guarantees that \code{n} rows are used at the beginning of the query.
Filters, join operations and a lower number of rows available in the scanned
file influence the final number of rows.
}
\examples{
# fetch 3 rows
as_polars_lf(iris)$fetch(3)

# this fetch-query returns 4 rows, because we started with 3 and appended one
# row in the query (see section 'Details')
as_polars_lf(iris)$
  select(pl$col("Species")$append("flora gigantica, alien"))$
  fetch(3)
}
\seealso{
\itemize{
\item \code{\link[=lazyframe__collect]{$collect()}} - regular collect.
\item \code{\link[=lazyframe__profile]{$profile()}} - same as \verb{$collect()} but also returns
a table with each operation profiled.
\item \code{\link[=lazyframe__collect_in_background]{$collect_in_background()}} - non-blocking
collect returns a future handle. Can also just be used via
\verb{$collect(collect_in_background = TRUE)}.
\item \code{\link[=lazyframe__sink_parquet]{$sink_parquet()}} streams query to a parquet file.
\item \code{\link[=lazyframe__sink_ipc]{$sink_ipc()}} streams query to a arrow file.
}
}
