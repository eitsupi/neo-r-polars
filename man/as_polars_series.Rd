% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_polars_series.R
\name{as_polars_series}
\alias{as_polars_series}
\alias{as_polars_series.default}
\alias{as_polars_series.polars_series}
\alias{as_polars_series.double}
\alias{as_polars_series.integer}
\alias{as_polars_series.character}
\alias{as_polars_series.logical}
\alias{as_polars_series.raw}
\alias{as_polars_series.factor}
\alias{as_polars_series.Date}
\alias{as_polars_series.POSIXct}
\alias{as_polars_series.difftime}
\alias{as_polars_series.hms}
\alias{as_polars_series.blob}
\alias{as_polars_series.array}
\alias{as_polars_series.NULL}
\alias{as_polars_series.list}
\alias{as_polars_series.AsIs}
\alias{as_polars_series.data.frame}
\alias{as_polars_series.integer64}
\alias{as_polars_series.vctrs_rcrd}
\alias{as_polars_series.clock_time_point}
\alias{as_polars_series.clock_sys_time}
\alias{as_polars_series.clock_zoned_time}
\title{Create a Polars Series from an R object}
\usage{
as_polars_series(x, name = NULL, ...)

\method{as_polars_series}{default}(x, name = NULL, ...)

\method{as_polars_series}{polars_series}(x, name = NULL, ...)

\method{as_polars_series}{double}(x, name = NULL, ...)

\method{as_polars_series}{integer}(x, name = NULL, ...)

\method{as_polars_series}{character}(x, name = NULL, ...)

\method{as_polars_series}{logical}(x, name = NULL, ...)

\method{as_polars_series}{raw}(x, name = NULL, ...)

\method{as_polars_series}{factor}(x, name = NULL, ...)

\method{as_polars_series}{Date}(x, name = NULL, ...)

\method{as_polars_series}{POSIXct}(x, name = NULL, ...)

\method{as_polars_series}{difftime}(x, name = NULL, ...)

\method{as_polars_series}{hms}(x, name = NULL, ...)

\method{as_polars_series}{blob}(x, name = NULL, ...)

\method{as_polars_series}{array}(x, name = NULL, ...)

\method{as_polars_series}{`NULL`}(x, name = NULL, ...)

\method{as_polars_series}{list}(x, name = NULL, ...)

\method{as_polars_series}{AsIs}(x, name = NULL, ...)

\method{as_polars_series}{data.frame}(x, name = NULL, ...)

\method{as_polars_series}{integer64}(x, name = NULL, ...)

\method{as_polars_series}{vctrs_rcrd}(x, name = NULL, ...)

\method{as_polars_series}{clock_time_point}(x, name = NULL, ...)

\method{as_polars_series}{clock_sys_time}(x, name = NULL, ...)

\method{as_polars_series}{clock_zoned_time}(x, name = NULL, ...)
}
\arguments{
\item{x}{An R object.}

\item{name}{A single string or \code{NULL}. Name of the Series.
Will be used as a column name when used in a \link[=DataFrame]{polars DataFrame}.
When not specified, name is set to an empty string.}

\item{...}{Additional arguments passed to the methods.}
}
\value{
A \link[=Series]{polars Series}
}
\description{
The \code{\link[=as_polars_series]{as_polars_series()}} function creates a \link[=Series]{polars Series} from various R objects.
The Data Type of the Series is determined by the class of the input object.
}
\details{
The default method of \code{\link[=as_polars_series]{as_polars_series()}} throws an error,
so we need to define methods for the classes we want to support.
}
\examples{
# double
as_polars_series(c(1, 2))

# integer
as_polars_series(1:2)

# character
as_polars_series(c("foo", "bar"))

# logical
as_polars_series(c(TRUE, FALSE))

# raw
as_polars_series(charToRaw("foo"))

# factor
as_polars_series(factor(c("a", "b")))

# Date
as_polars_series(as.Date("2021-01-01"))

# POSIXct with timezone
as_polars_series(as.POSIXct("2021-01-01 00:00:00", "UTC"))

# POSIXct without timezone
as_polars_series(as.POSIXct("2021-01-01 00:00:00"))

# difftime
as_polars_series(as.difftime(1, units = "days"))

# NULL
as_polars_series(NULL)

# list
as_polars_series(list(1, "foo", TRUE))

# data.frame
as_polars_series(data.frame(x = 1:2, y = c("foo", "bar")))

# hms
if (requireNamespace("hms", quietly = TRUE)) {
  as_polars_series(hms::as_hms("01:00:00"))
}

# blob
if (requireNamespace("blob", quietly = TRUE)) {
  as_polars_series(blob::as_blob(c("foo", "bar")))
}

# integer64
if (requireNamespace("bit64", quietly = TRUE)) {
  as_polars_series(bit64::as.integer64(c(NA, "9223372036854775807")))
}

# clock naive time
if (requireNamespace("clock", quietly = TRUE)) {
  as_polars_series(clock::naive_time_parse(c(
    NA,
    "1900-01-01T12:34:56.123456789",
    "2020-01-01T12:34:56.123456789"
  ), precision = "nanosecond"))
}
}
\seealso{
\itemize{
\item \code{\link[=series__to_r_vector]{<Series>$to_r_vector()}}: Export the Series as an R vector.
}
}
