% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions-eager.R
\name{pl__concat}
\alias{pl__concat}
\title{Combine multiple DataFrames, LazyFrames, or Series into a single object}
\usage{
pl__concat(..., how = "vertical", rechunk = FALSE, parallel = TRUE)
}
\arguments{
\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> \link[=DataFrame]{DataFrames},
\link{LazyFrames}, \link{Series}. All elements must have the same class.}

\item{how}{Strategy to concatenate items. Must be one of:
\itemize{
\item \code{"vertical"}: applies multiple vstack operations;
\item \code{"vertical_relaxed"}: same as \code{"vertical"}, but additionally coerces
columns to their common supertype if they are mismatched (eg: Int32 to
Int64);
\item \code{"diagonal"}: finds a union between the column schemas and fills missing
column values with \code{null};
\item \code{"diagonal_relaxed"}: same as \code{"diagonal"}, but additionally coerces
columns to their common supertype if they are mismatched (eg: Int32 to
Int64);
\item \code{"horizontal"}: stacks Series from DataFrames horizontally and fills with
\code{null} if the lengths donâ€™t match;
\item \code{"align"}, \code{"align_full"}, \code{"align_left"}, \code{"align_right"}: Combines
frames horizontally, auto-determining the common key columns and aligning
rows using the same logic as \code{align_frames} (note that \code{"align"} is an
alias for \code{"align_full"}). The "align" strategy determines the type of
join used to align the frames, equivalent to the "how" parameter on
\code{align_frames}. Note that the common join columns are automatically
coalesced, but other column collisions will raise an error (if you need
more control over this you should use a suitable \code{join} method directly).
}

\link{Series} only support the \code{"vertical"} strategy.}

\item{rechunk}{Make sure that the result data is in contiguous memory.}

\item{parallel}{Only relevant for \link[=LazyFrame]{LazyFrames}. This determines if the
concatenated lazy computations may be executed in parallel.}
}
\value{
The same class (\code{polars_data_frame}, \code{polars_lazy_frame} or
\code{polars_series}) as the input.
}
\description{
Combine multiple DataFrames, LazyFrames, or Series into a single object
}
\examples{
# default is 'vertical' strategy
df1 <- pl$DataFrame(a = 1L, b = 3L)
df2 <- pl$DataFrame(a = 2L, b = 4L)
pl$concat(df1, df2)

# 'a' is coerced to float64
df1 <- pl$DataFrame(a = 1L, b = 3L)
df2 <- pl$DataFrame(a = 2, b = 4L)
pl$concat(df1, df2, how = "vertical_relaxed")

df_h1 <- pl$DataFrame(l1 = 1:2, l2 = 3:4)
df_h2 <- pl$DataFrame(r1 = 5:6, r2 = 7:8, r3 = 9:10)
pl$concat(df_h1, df_h2, how = "horizontal")

# use 'diagonal' strategy to fill empty column values with nulls
df1 <- pl$DataFrame(a = 1L, b = 3L)
df2 <- pl$DataFrame(a = 2L, c = 4L)
pl$concat(df1, df2, how = "diagonal")

df_a1 <- pl$DataFrame(id = 1:2, x = 3:4)
df_a2 <- pl$DataFrame(id = 2:3, y = 5:6)
df_a3 <- pl$DataFrame(id = c(1L, 3L), z = 7:8)
pl$concat(df_a1, df_a2, df_a3, how = "align")
pl$concat(df_a1, df_a2, df_a3, how = "align_left")
pl$concat(df_a1, df_a2, df_a3, how = "align_right")
}
