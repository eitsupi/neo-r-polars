% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr-datetime.R
\name{expr_dt_replace_time_zone}
\alias{expr_dt_replace_time_zone}
\title{Replace time zone for an expression of type Datetime}
\usage{
expr_dt_replace_time_zone(
  time_zone,
  ...,
  ambiguous = c("raise", "earliest", "latest", "null"),
  non_existent = c("raise", "null")
)
}
\arguments{
\item{time_zone}{\code{NULL} or a character time zone from \code{\link[base:timezones]{base::OlsonNames()}}.
Pass \code{NULL} to unset time zone.}

\item{...}{These dots are for future extensions and must be empty.}

\item{ambiguous}{Determine how to deal with ambiguous datetimes.
Character vector or \link{expression} containing the followings:
\itemize{
\item \code{"raise"} (default): Throw an error
\item \code{"earliest"}: Use the earliest datetime
\item \code{"latest"}: Use the latest datetime
\item \code{"null"}: Return a null value
}}

\item{non_existent}{Determine how to deal with non-existent datetimes.
One of the followings:
\itemize{
\item \code{"raise"} (default): Throw an error
\item \code{"null"}: Return a null value
}}
}
\value{
A polars \link{expression}
}
\description{
Different from \link[=expr_dt_convert_time_zone]{$dt$convert_time_zone()}, this
will also modify the underlying timestamp and will ignore the original time
zone.
}
\examples{
df <- pl$select(
  london_timezone = pl$datetime_range(
    as.Date("2020-03-01"),
    as.Date("2020-07-01"),
    "1mo",
    time_zone = "UTC"
  )$dt$convert_time_zone(time_zone = "Europe/London")
)
df$with_columns(
  London_to_Amsterdam = pl$col("london_timezone")$dt$replace_time_zone(time_zone="Europe/Amsterdam")
)
# You can use `ambiguous` to deal with ambiguous datetimes:
dates <- c(
  "2018-10-28 01:30",
  "2018-10-28 02:00",
  "2018-10-28 02:30",
  "2018-10-28 02:00"
) |>
  as.POSIXct("UTC")

df2 <- pl$DataFrame(
  ts = as_polars_series(dates),
  ambiguous = c("earliest", "earliest", "latest", "latest"),
)

df2$with_columns(
  ts_localized = pl$col("ts")$dt$replace_time_zone(
    "Europe/Brussels",
    ambiguous = pl$col("ambiguous")
  )
)
}
