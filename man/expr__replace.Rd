% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr-expr.R
\name{expr__replace}
\alias{expr__replace}
\title{Replace the given values by different values of the same data type.}
\usage{
expr__replace(old, new)
}
\arguments{
\item{old}{Value or vector of values to replace. Accepts expression input.
Vectors are parsed as Series, other non-expression inputs are parsed as
literals. Also accepts a list of values like \code{list(old = new)}.}

\item{new}{Value or vector of values to replace by. Accepts expression
input. Vectors are parsed as Series, other non-expression inputs are parsed
as literals. Length must match the length of \code{old} or have length 1.}
}
\value{
A polars \link{expression}
}
\description{
This allows one to recode values in a column, leaving all other values
unchanged. See \code{\link[=expr__replace_strict]{$replace_strict()}} to give a default
value to all other values and to specify the output datatype.
}
\details{
The global string cache must be enabled when replacing categorical values.
}
\examples{
df <- pl$DataFrame(a = c(1, 2, 2, 3))

# "old" and "new" can take vectors of length 1 or of same length
df$with_columns(replaced = pl$col("a")$replace(2, 100))
df$with_columns(replaced = pl$col("a")$replace(c(2, 3), c(100, 200)))

# "old" can be a named list where names are values to replace, and values are
# the replacements
mapping <- list(`2` = 100, `3` = 200)
df$with_columns(replaced = pl$col("a")$replace(mapping))

# The original data type is preserved when replacing by values of a
# different data type. Use $replace_strict() to replace and change the
# return data type.
df <- pl$DataFrame(a = c("x", "y", "z"))
mapping <- list(x = 1, y = 2, z = 3)
df$with_columns(replaced = pl$col("a")$replace(mapping))

# "old" and "new" can take Expr
df <- pl$DataFrame(a = c(1, 2, 2, 3), b = c(1.5, 2.5, 5, 1))
df$with_columns(
  replaced = pl$col("a")$replace(
    old = pl$col("a")$max(),
    new = pl$col("b")$sum()
  )
)
}
