% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr-expr.R
\name{expr__all}
\alias{expr__all}
\title{Check if all boolean values in a column are true}
\usage{
expr__all(..., ignore_nulls = TRUE)
}
\arguments{
\item{...}{Dots which should be empty.}

\item{ignore_nulls}{If \code{TRUE} (default), ignore null values. If \code{FALSE},
\href{https://en.wikipedia.org/wiki/Three-valued_logic}{Kleene logic} is used to
deal with nulls: if the column contains any null values and no \code{TRUE} values,
the output is null.}
}
\value{
A polars \link{expression}
}
\description{
This method is an expression - not to be confused with \code{\link[=pl__all]{pl$all()}}
which is a function to select all columns.
}
\examples{
df <- pl$DataFrame(
  a = c(TRUE, TRUE),
  b = c(TRUE, FALSE),
  c = c(NA, TRUE),
  d = c(NA, NA)
)

# By default, ignore null values. If there are only nulls, then all() returns
# TRUE.
df$select(pl$col("*")$all())

# If we set ignore_nulls = FALSE, then we don't know if all values in column
# "c" are TRUE, so it returns null
df$select(pl$col("*")$all(ignore_nulls = FALSE))
}
