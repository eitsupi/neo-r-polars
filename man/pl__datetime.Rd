% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functions-as_datatype.R
\name{pl__datetime}
\alias{pl__datetime}
\title{Create a Polars literal expression of type Datetime}
\usage{
pl__datetime(
  year,
  month,
  day,
  hour = NULL,
  minute = NULL,
  second = NULL,
  microsecond = NULL,
  ...,
  time_unit = c("us", "ns", "ms"),
  time_zone = NULL,
  ambiguous = c("raise", "earliest", "latest", "null")
)
}
\arguments{
\item{year}{An \link[=Expr]{polars expression} or something can be coerced to
an \link[=Expr]{polars expression} by \code{\link[=as_polars_expr]{as_polars_expr()}},
which represents a column or literal number of year.}

\item{month}{An \link[=Expr]{polars expression} or something can be coerced to
an \link[=Expr]{polars expression} by \code{\link[=as_polars_expr]{as_polars_expr()}},
which represents a column or literal number of month. Range: 1-12.}

\item{day}{An \link[=Expr]{polars expression} or something can be coerced to
an \link[=Expr]{polars expression} by \code{\link[=as_polars_expr]{as_polars_expr()}},
which represents a column or literal number of day. Range: 1-31.}

\item{hour}{An \link[=Expr]{polars expression} or something can be coerced to
an \link[=Expr]{polars expression} by \code{\link[=as_polars_expr]{as_polars_expr()}},
which represents a column or literal number of hour. Range: 0-23.}

\item{minute}{An \link[=Expr]{polars expression} or something can be coerced to
an \link[=Expr]{polars expression} by \code{\link[=as_polars_expr]{as_polars_expr()}},
which represents a column or literal number of minute. Range: 0-59.}

\item{second}{An \link[=Expr]{polars expression} or something can be coerced to
an \link[=Expr]{polars expression} by \code{\link[=as_polars_expr]{as_polars_expr()}},
which represents a column or literal number of second. Range: 0-59.}

\item{microsecond}{An \link[=Expr]{polars expression} or something can be coerced to
an \link[=Expr]{polars expression} by \code{\link[=as_polars_expr]{as_polars_expr()}},
which represents a column or literal number of microsecond. Range: 0-999999.}

\item{...}{These dots are for future extensions and must be empty.}

\item{time_unit}{One of \code{"us"} (default, microseconds),
\code{"ns"} (nanoseconds) or \code{"ms"}(milliseconds). Representing the unit of time.}

\item{time_zone}{A string or \code{NULL} (default). Representing the timezone.}

\item{ambiguous}{Determine how to deal with ambiguous datetimes.
Character vector or \link{expression} containing the followings:
\itemize{
\item \code{"raise"} (default): Throw an error
\item \code{"earliest"}: Use the earliest datetime
\item \code{"latest"}: Use the latest datetime
\item \code{"null"}: Return a null value
}}
}
\value{
A polars \link{expression}
}
\description{
Create a Polars literal expression of type Datetime
}
\examples{
df <- pl$DataFrame(
  month = c(1, 2, 3),
  day = c(4, 5, 6),
  hour = c(12, 13, 14),
  minute = c(15, 30, 45)
)

df$with_columns(
  pl$datetime(
    2024,
    pl$col("month"),
    pl$col("day"),
    pl$col("hour"),
    pl$col("minute"),
    time_zone = "Australia/Sydney"
  )
)

# We can also use `pl$datetime()` for filtering:
df <- pl$select(
  start = ISOdatetime(2024, 1, 1, 0, 0, 0),
  end = c(
    ISOdatetime(2024, 5, 1, 20, 15, 10),
    ISOdatetime(2024, 7, 1, 21, 25, 20),
    ISOdatetime(2024, 9, 1, 22, 35, 30)
  )
)

df$filter(pl$col("end") > pl$datetime(2024, 6, 1))
}
