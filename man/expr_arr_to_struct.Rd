% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr-array.R
\name{expr_arr_to_struct}
\alias{expr_arr_to_struct}
\title{Convert the Series of type Array to a Series of type Struct}
\usage{
expr_arr_to_struct(fields = NULL)
}
\arguments{
\item{fields}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
\code{NULL} (default) or character vector of field names, or a function that
takes an integer index and returns character.
If the name and number of the desired fields is known in advance,
character vector of field names can be given, which will be assigned by index.
Otherwise, to dynamically assign field names, a custom function can be used;
if neither are set, fields will be \code{field_0}, \code{field_1}...
See the examples for details.}
}
\value{
A polars \link{expression}
}
\description{
Convert the Series of type Array to a Series of type Struct
}
\examples{
df <- pl$DataFrame(
  n = list(c(0, 1, 2), c(3, 4, 5)),
  .schema_overrides = list(n = pl$Array(pl$Int8, 3))
)

df$with_columns(struct = pl$col("n")$arr$to_struct())

# Convert array to struct with field name assignment by function/index:
df$select(pl$col("n")$arr$to_struct(\(idx) paste0("n", idx)))$unnest("n")

# Convert array to struct with field name assignment by index from character:
df$select(pl$col("n")$arr$to_struct(c("a", "b", "c")))$unnest("n")
}
