% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/series-to_r_vector.R
\name{series__to_r_vector}
\alias{series__to_r_vector}
\title{Export the Series as an R vector}
\usage{
series__to_r_vector(
  ...,
  int64 = "double",
  ambiguous = "raise",
  non_existent = "raise"
)
}
\arguments{
\item{...}{These dots are for future extensions and must be empty.}

\item{int64}{Determine how to convert Polars' Int64, UInt32, or UInt64 type values to R type.
One of the followings:
\itemize{
\item \code{"double"}: Convert to the R's \link{double} type.
\item \code{"character"}: Convert to the R's \link{character} type.
\item \code{"integer"}: Convert to the R's \link{integer} type.
If the value is out of the range of R's integer type, export as \link{NA_integer_}.
\item \code{"integer64"}: Convert to the \link[bit64:bit64-package]{bit64::integer64} class.
The \link[bit64:bit64-package]{bit64} package must be installed.
If the value is out of the range of \link[bit64:bit64-package]{bit64::integer64}, export as \link[bit64:as.integer64.character]{bit64::NA_integer64_}.
}}

\item{ambiguous}{Determine how to deal with ambiguous datetimes.
Character vector or Expression containing the followings:
\itemize{
\item \code{"raise"} (default): Throw an error
\item \code{"earliest"}: Use the earliest datetime
\item \code{"latest"}: Use the latest datetime
\item \code{"null"}: Return a null value
}}

\item{non_existent}{Determine how to deal with non-existent datetimes.
One of the followings:
\itemize{
\item \code{"raise"} (default): Throw an error
\item \code{"null"}: Return a null value
}}
}
\value{
A \link{vector}
}
\description{
Export the Series as an R vector
}
\examples{
# Create a Series of UInt64
series_uint64 <- as_polars_series(
  c(NA, "0", "4294967295", "18446744073709551615")
)$cast(pl$UInt64)
series_uint64

## Export Int64 as double
series_uint64$to_r_vector(int64 = "double")

## Export Int64 as character
series_uint64$to_r_vector(int64 = "character")

## Export Int64 as integer
series_uint64$to_r_vector(int64 = "integer")

## Export Int64 as bit64::integer64
if (requireNamespace("bit64", quietly = TRUE)) {
  series_uint64$to_r_vector(int64 = "integer64")
}
}
