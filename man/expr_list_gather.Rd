% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/expr-list.R
\name{expr_list_gather}
\alias{expr_list_gather}
\title{Get several values by index in every sub-list}
\usage{
expr_list_gather(indices, ..., null_on_oob = FALSE)
}
\arguments{
\item{indices}{An Expr or something coercible to an Expr, that can return
several indices. Values are 0-indexed (so index 0 would return the
first item of every sub-list) and negative values start from the end (index
\code{-1} returns the last item). If the index is out of bounds, it will return
a \code{null}. Strings are parsed as column names.}

\item{...}{These dots are for future extensions and must be empty.}

\item{null_on_oob}{If \code{TRUE}, return \code{null} if an index is out of bounds.
Otherwise, raise an error.}
}
\value{
A polars \link{expression}
}
\description{
This allows to extract several values per list. To extract a single value by
index, use \code{\link[=expr_list_get]{$list$get()}}. The indices may be defined in a
single column, or by sub-lists in another column of dtype List.
}
\examples{
df <- pl$DataFrame(
  a = list(c(3, 2, 1), 1, c(1, 2)),
  idx = list(0:1, integer(), c(1L, 999L))
)
df$with_columns(
  gathered = pl$col("a")$list$gather("idx", null_on_oob = TRUE)
)

df$with_columns(
  gathered = pl$col("a")$list$gather(list(2L), null_on_oob = TRUE)
)

# Indices must be an List(Int/Uint) type to work.
# So we may need to cast the column to List(UInt) first.
df$with_columns(
  gathered = pl$col("a")$list$gather(pl$col("a")$cast(pl$List(pl$UInt64)), null_on_oob = TRUE)
)
}
