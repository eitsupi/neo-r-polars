% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dataframe-frame.R
\name{dataframe__with_columns}
\alias{dataframe__with_columns}
\title{Modify/append column(s) of a DataFrame}
\usage{
dataframe__with_columns(...)
}
\arguments{
\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}>
Name-value pairs of objects to be converted to polars \link[=Expr]{expressions}
by the \code{\link[=as_polars_expr]{as_polars_expr()}} function.
Characters are parsed as column names, other non-expression inputs are parsed as \link[=pl__lit]{literals}.
Each name will be used as the expression name.}
}
\value{
A polars \link{DataFrame}
}
\description{
Add columns or modify existing ones with expressions. This is similar to
\code{dplyr::mutate()} as it keeps unmentioned columns (unlike \verb{$select()}).

However, unlike \code{dplyr::mutate()}, one cannot use new variables in subsequent
expressions in the same \verb{$with_columns()}call. For instance, if you create a
variable \code{x}, you will only be able to use it in another \verb{$with_columns()}
or \verb{$select()} call.
}
\examples{
as_polars_df(iris)$with_columns(
  abs_SL = pl$col("Sepal.Length")$abs(),
  add_2_SL = pl$col("Sepal.Length") + 2
)

# same query
l_expr <- list(
  pl$col("Sepal.Length")$abs()$alias("abs_SL"),
  (pl$col("Sepal.Length") + 2)$alias("add_2_SL")
)
as_polars_df(iris)$with_columns(l_expr)

as_polars_df(iris)$with_columns(
  SW_add_2 = (pl$col("Sepal.Width") + 2),
  # unnamed expr will keep name "Sepal.Length"
  pl$col("Sepal.Length")$abs()
)
}
