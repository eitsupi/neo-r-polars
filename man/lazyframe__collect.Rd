% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe-frame.R
\name{lazyframe__collect}
\alias{lazyframe__collect}
\title{Materialize this LazyFrame into a DataFrame}
\usage{
lazyframe__collect(
  ...,
  type_coercion = TRUE,
  predicate_pushdown = TRUE,
  projection_pushdown = TRUE,
  simplify_expression = TRUE,
  slice_pushdown = TRUE,
  comm_subplan_elim = TRUE,
  comm_subexpr_elim = TRUE,
  cluster_with_columns = TRUE,
  no_optimization = FALSE,
  streaming = FALSE,
  `_eager` = FALSE
)
}
\arguments{
\item{...}{These dots are for future extensions and must be empty.}

\item{type_coercion}{A logical, indicates type coercion optimization.}

\item{predicate_pushdown}{A logical, indicates predicate pushdown optimization.}

\item{projection_pushdown}{A logical, indicates projection pushdown optimization.}

\item{simplify_expression}{A logical, indicates simplify expression optimization.}

\item{slice_pushdown}{A logical, indicates slice pushdown optimization.}

\item{comm_subplan_elim}{A logical, indicates trying to cache branching subplans that occur on self-joins or unions.}

\item{comm_subexpr_elim}{A logical, indicates trying to cache common subexpressions.}

\item{cluster_with_columns}{A logical, indicates to combine sequential independent calls to with_columns.}

\item{no_optimization}{A logical. If \code{TRUE}, turn off (certain) optimizations.}

\item{streaming}{A logical. If \code{TRUE}, process the query in batches to handle larger-than-memory data.
If \code{FALSE} (default), the entire query is processed in a single batch.
Note that streaming mode is considered unstable.
It may be changed at any point without it being considered a breaking change.}

\item{_eager}{A logical, indicates to turn off multi-node optimizations and the other optimizations.
This option is intended for internal use only.}
}
\value{
A polars \link{DataFrame}
}
\description{
By default, all query optimizations are enabled.
Individual optimizations may be disabled by setting the corresponding parameter to \code{FALSE}.
}
\examples{
lf <- pl$LazyFrame(
  a = c("a", "b", "a", "b", "b", "c"),
  b = 1:6,
  c = 6:1,
)
lf$group_by("a")$agg(pl$all()$sum())$collect()

# Collect in streaming mode
lf$group_by("a")$agg(pl$all()$sum())$collect(
  streaming = TRUE
)
}
\seealso{
\itemize{
\item \code{\link[=lazyframe__profile]{$profile()}} - same as \verb{$collect()} but also returns
a table with each operation profiled.
\item \code{\link[=lazyframe__collect_in_background]{$collect_in_background()}} - non-blocking
collect returns a future handle. Can also just be used via
\verb{$collect(collect_in_background = TRUE)}.
\item \code{\link[=lazyframe__sink_parquet]{$sink_parquet()}} streams query to a parquet file.
\item \code{\link[=lazyframe__sink_ipc]{$sink_ipc()}} streams query to a arrow file.
}
}
