% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_polars_expr.R
\name{as_polars_expr}
\alias{as_polars_expr}
\alias{as_polars_expr.default}
\alias{as_polars_expr.polars_expr}
\alias{as_polars_expr.polars_series}
\alias{as_polars_expr.character}
\alias{as_polars_expr.logical}
\alias{as_polars_expr.integer}
\alias{as_polars_expr.double}
\alias{as_polars_expr.raw}
\alias{as_polars_expr.NULL}
\title{Create a Polars expression from an R object}
\usage{
as_polars_expr(x, ...)

\method{as_polars_expr}{default}(x, ...)

\method{as_polars_expr}{polars_expr}(x, ..., structify = FALSE)

\method{as_polars_expr}{polars_series}(x, ...)

\method{as_polars_expr}{character}(x, ..., as_lit = FALSE)

\method{as_polars_expr}{logical}(x, ...)

\method{as_polars_expr}{integer}(x, ...)

\method{as_polars_expr}{double}(x, ...)

\method{as_polars_expr}{raw}(x, ...)

\method{as_polars_expr}{`NULL`}(x, ...)
}
\arguments{
\item{x}{An R object.}

\item{...}{Additional arguments passed to the methods.}

\item{structify}{A logical. If \code{TRUE}, convert multi-column expressions to a single struct expression
by calling \code{\link[=pl__struct]{pl$struct()}}. Otherwise (default), done nothing.}

\item{as_lit}{A logical value indicating whether to treat vector as literal values or not.
This argument is always set to \code{TRUE} when calling this function from \code{\link[=pl__lit]{pl$lit()}},
and expects to return literal values. See examples for details.}
}
\value{
A polars \link{expression}
}
\description{
The \code{\link[=as_polars_expr]{as_polars_expr()}} function creates a polars \link{expression} from various R objects.
This function is used internally by various polars functions that accept \link[=Expr]{expressions}.
In most cases, users should use \code{\link[=pl__lit]{pl$lit()}} instead of this function, which is
a shorthand for \code{as_polars_expr(x, as_lit = TRUE)}.
(In other words, this function can be considered as an internal implementation to realize
the \code{lit} function of the Polars API in other languages.)
}
\details{
Because R objects are typically mapped to \link{Series}, this function often calls \code{\link[=as_polars_series]{as_polars_series()}} internally.
However, unlike R, Polars has scalars of length 1, so if an R object is converted to a \link{Series} of length 1,
this function will use \verb{<Expr>$first()} at the end to convert it to a scalar value.
If you want to implement your own conversion from an R class to a Polars object,
define an S3 method for \code{\link[=as_polars_series]{as_polars_series()}} instead of this function.
\subsection{Default S3 method}{

Create a \link{Series} by calling \code{\link[=as_polars_series]{as_polars_series()}} and then convert that \link{Series} to an \link{Expr}.
If the length of the \link{Series} is \code{1}, it will be converted to a scalar value using \verb{<Expr>$first()} at the end.

Additional arguments \code{...} are passed to \code{\link[=as_polars_series]{as_polars_series()}}.
}

\subsection{S3 method for \link{character}}{

If the \code{as_lit} argument is \code{FALSE} (default), this function will call \code{\link[=pl__col]{pl$col()}} and
the character vector is treated as column names.
}
}
\section{Literal scalar mapping}{
Since R has no scalar class, each of the following types of length 1 cases is specially
converted to a scalar literal.
\itemize{
\item character: String
\item logical: Boolean
\item integer: Int32
\item double: Float64
}

These types' \code{NA} is converted to a \code{null} literal with casting to the corresponding Polars type.

The \link{raw} type vector is converted to a Binary scalar.
\itemize{
\item raw: Binary
}

\code{NULL} is converted to a Null type \code{null} literal.
\itemize{
\item NULL: Null
}

Other scalar values cannot be created directly, so we need to \verb{$cast()} from other scalar values
or extract them with the \verb{$first()} method from a \link{Series}.
(\code{\link[=as_polars_expr]{as_polars_expr()}} and \code{\link[=pl__lit]{pl$lit()}} automatically apply the \verb{$first()} method to extract scalar values
inside the default S3 method of \code{\link[=as_polars_expr]{as_polars_expr()}}.)
}

\examples{
# character
## as_lit = FALSE (default)
as_polars_expr("a") # Same as `pl$col("a")`
as_polars_expr(c("a", "b")) # Same as `pl$col("a", "b")`

## as_lit = TRUE
as_polars_expr(character(0), as_lit = TRUE)
as_polars_expr("a", as_lit = TRUE)
as_polars_expr(NA_character_, as_lit = TRUE)
as_polars_expr(c("a", "b"), as_lit = TRUE)

# logical
as_polars_expr(logical(0))
as_polars_expr(TRUE)
as_polars_expr(NA)
as_polars_expr(c(TRUE, FALSE))

# integer
as_polars_expr(integer(0))
as_polars_expr(1L)
as_polars_expr(NA_integer_)
as_polars_expr(c(1L, 2L))

# double
as_polars_expr(double(0))
as_polars_expr(1)
as_polars_expr(NA_real_)
as_polars_expr(c(1, 2))

# raw
as_polars_expr(raw(0))
as_polars_expr(charToRaw("foo"))

# NULL
as_polars_expr(NULL)

# default method (for list)
as_polars_expr(list())
as_polars_expr(list(1))
as_polars_expr(list(1, 2))

# polars_series
## Unlike the default method, this method does not call `$first()`
as_polars_series(1) |>
  as_polars_expr()

# polars_expr
as_polars_expr(pl$col("a", "b"))
as_polars_expr(pl$col("a", "b"), structify = TRUE)
}
\seealso{
\itemize{
\item \code{\link[=as_polars_series]{as_polars_series()}}: R -> Polars type mapping is mostly defined by this function.
}
}
