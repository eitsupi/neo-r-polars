% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/lazyframe-frame.R
\name{lazyframe__sql}
\alias{lazyframe__sql}
\title{Execute a SQL query against the LazyFrame}
\usage{
lazyframe__sql(query, ..., table_name = "self")
}
\arguments{
\item{query}{SQL query to execute.}

\item{...}{These dots are for future extensions and must be empty.}

\item{table_name}{Optionally provide an explicit name for the table that
represents the calling frame (defaults to \code{"self"}).}
}
\value{
A polars \link{LazyFrame}
}
\description{
Execute a SQL query against the LazyFrame
}
\details{
The calling frame is automatically registered as a table in the SQL context
under the name \code{"self"}. If you want access to the DataFrames and LazyFrames
found in the current globals, use the top-level \code{\link[=pl__sql]{pl$sql()}}.

More control over registration and execution behaviour is available by using
the \code{\link[=pl__SQLContext]{SQLContext}} object.
}
\examples{
lf1 <- pl$LazyFrame(a = 1:3, b = 6:8, c = c("z", "y", "x"))

# Query the LazyFrame using SQL:
lf1$sql("SELECT c, b FROM self WHERE a > 1")$collect()

# Apply SQL transforms (aliasing "self" to "frame") then filter natively
# (you can freely mix SQL and native operations):
lf1$sql(
  query="
      SELECT
         a,
         (a \% 2 == 0) AS a_is_even,
         (b::float4 / 2) AS 'b/2',
         CONCAT_WS(':', c, c, c) AS c_c_c
      FROM frame
      ORDER BY a
",
table_name="frame",
)$filter(!pl$col("c_c_c")$str$starts_with("x"))$collect()
}
